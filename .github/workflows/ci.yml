name: Review Visualizer Continious Integration(CI)
on:
  push:
    branches:
      - main
jobs:
  build:
    strategy:
      matrix:
        project: ['Generator','WebApi']
    runs-on: ubuntu_latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env variables
        run: |
          echo "PROJECT_PATH=ReviewVisualizer.${{ matrix.project }}/ReviewVisualizer.${{ matrix.project }}.csproj" >> $GITHUB_ENV
          echo "AZURE_WEBAPP_PACKAGE_PATH=publish.${{ matrix.project }}" >> $GITHUB_ENV
      
      # - name: Prepare environment
      #   uses: ./.github/workflows/actions/prepare-net-env
      #   with:
      #     os: 'ubuntu_latest'
      #     project-path: $PROJECT_PATH

      # - name: Build ðŸ§±
      #   run: dotnet build $PROJECT_PATH --configuration Release --no-restore

      # - name: Set output data
      #   id: set-output
      #   run: |
      #     echo "project=${{ matrix.project }} >> $GITHUB_OUTPUT"
      #     echo "project-path=$PROJECT_PATH" >> $GITHUB_OUTPUT

      # - name: Publish
      #   run: dotnet publish WebApi -c Release --no-build --output '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}'
  
  unit-test:
    name: Unit tests (for Generator Project)
    runs-on: ubuntu_latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env variables
        run: |
          echo "TEST_PROJECT_PATH=ReviewVisualizer.Generator.Tests/ReviewVisualizer.Generator.Tests.csproj" >> $GITHUB_ENV
          
      - name: Prepare environment
        uses: ./.github/workflows/actions/prepare-net-env
        with:
          os: ubuntu_latest
          project_path: $TEST_PROJECT_PATH
      
      - name: Execute Test unit tests
        run: dotnet test $TEST_PROJECT_PATH --configuration Release

  prepare-env-for-integration-testing:
    needs: [unit-test]
    runs-on: ubuntu_latest
    steps:
      - name: Rublish ReviewVisualizer ${{ needs.build.outputs.project }}
        run: echo "Preparing test env for ${{ needs.build.outputs.project }}"

  integartion-test:
    needs: [prepare-env-for-integration-testing]
    runs-on: ubuntu_latest
    steps:
      - name: Rublish ReviewVisualizer ${{ needs.build.outputs.project }}
        run: echo "Executing integration tests for ${{ needs.build.outputs.project }}"

  publish:
    needs: [integartion-test]
    runs-on: ubuntu_latest
    steps:
      - name: Rublish ReviewVisualizer ${{ needs.build.outputs.project }}
        run: echo "Publishing ${{ needs.build.outputs.project }}"
