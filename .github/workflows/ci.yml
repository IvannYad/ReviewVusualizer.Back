name: Review Visualizer Continious Integration(CI)
on:
  push:
    branches:
      - main
env:
  OS: ubuntu-latest
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup .NET ðŸ“¦
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Code lint / formatting check
        run: dotnet format --verify-no-changes
  
  build:
    needs: lint
    strategy:
      matrix:
        project: ['Generator','WebApi']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env variables
        run: |
          echo "PROJECT_PATH=ReviewVisualizer.${{ matrix.project }}/ReviewVisualizer.${{ matrix.project }}.csproj" >> $GITHUB_ENV
          echo "AZURE_WEBAPP_PACKAGE_PATH=publish.${{ matrix.project }}" >> $GITHUB_ENV
      
      - name: Prepare environment
        uses: ./.github/workflows/actions/prepare-net-env
        with:
          os: ${{ env.OS }}
          project-path: $PROJECT_PATH

      - name: Build ðŸ§±
        run: dotnet build $PROJECT_PATH --configuration Release --no-restore
  
  unit-test:
    name: Unit tests (for Generator Project)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env variables
        run: |
          echo "TEST_PROJECT_PATH=ReviewVisualizer.Generator.Tests/ReviewVisualizer.Generator.Tests.csproj" >> $GITHUB_ENV
          
      - name: Prepare environment
        uses: ./.github/workflows/actions/prepare-net-env
        with:
          os: ${{ env.OS }}
          project_path: $TEST_PROJECT_PATH
      
      - name: Run Unit Tests
        id: testing-step
        run: |
          dotnet test $TEST_PROJECT_PATH \
            --configuration Release \
            --logger:"html;LogFileName=UnitTests.html" \
            --collect:"XPlat Code Coverage"
      
      - name: Upload unit test report on tests failure
        if: failure() && steps.testing-step.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-report
          path: ReviewVisualizer.Generator.Tests/TestResults/UnitTests.html
      
      - name: Install ReportGenerator
        if: always()
        id: install-reportgenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
      - name: Generate user-friendly coverage report
        if: steps.install-reportgenerator.outcome == 'success'
        id: generate-coverage-report
        run: reportgenerator -reports:"ReviewVisualizer.Generator.Tests/TestResults/*/coverage.cobertura.xml" -targetdir:"coveragereport"  -reporttypes:Html
      
      - name: Upload Html Coverage Report
        if: steps.generate-coverage-report.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coveragereport

  integartion-test:
    runs-on: ubuntu-latest
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports:
          - 1433:1433
        env:
          SA_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          ACCEPT_EULA: "Y"
    env:
      CONNECTION_STRING: Server=localhost,1433;Database=IntegrationTestDb;User ID=sa;Password=${{ secrets.TEST_DB_PASSWORD }};TrustServerCertificate=True;
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env variables
        run: |
          echo "DATA_PROJECT_PATH=ReviewVisualizer.Data/ReviewVisualizer.Data.csproj" >> $GITHUB_ENV
          echo "STARTUP_PROJECT_PATH=ReviewVisualizer.WebApi/ReviewVisualizer.WebApi.csproj" >> $GITHUB_ENV
          echo "INTEGRATION_TESTS_PROJECT_PATH=ReviewVisualizer.Generator.IntegrationTests/ReviewVisualizer.Generator.IntegrationTests.csproj" >> $GITHUB_ENV
          
      - name: Prepare environment
        uses: ./.github/workflows/actions/prepare-net-env
        with:
          os: ${{ env.OS }}
          project-path: $TEST_PROJECT_PATH
      
      - name: Install dotnet-ef
        run: dotnet tool install --global dotnet-ef
      
      - name: Apply EF Core migrations
        run: |
          dotnet ef database update --project $DATA_PROJECT_PATH \
          --startup-project $STARTUP_PROJECT_PATH \
          --connection "$CONNECTION_STRING"
      
      - name: Run integration tests
        id: testing-step
        run: |
          dotnet test $INTEGRATION_TESTS_PROJECT_PATH \
            --configuration Release \
            --logger:"html;LogFileName=IntegrationTests.html" \
        env:
          ConnectionStrings__DefaultConnection: "${{ env.CONNECTION_STRING }}"
      
      - name: Upload integration test report on tests failure
        if: failure() && steps.testing-step.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-report
          path: ReviewVisualizer.Generator.IntegrationTests/TestResults/IntegrationTests.html

  publish:
    needs: integartion-test
    strategy:
      matrix:
        project: ['Generator','WebApi']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env variables
        run: |
          echo "PROJECT_PATH=ReviewVisualizer.${{ matrix.project }}/ReviewVisualizer.${{ matrix.project }}.csproj" >> $GITHUB_ENV
          echo "PUBLISH_PATH=ReviewVisualizer.${{ matrix.project }}" >> $GITHUB_ENV
      
      - name: Prepare environment
        uses: ./.github/workflows/actions/prepare-net-env
        with:
          os: ${{ env.OS }}
          project-path: $PROJECT_PATH

      - name: Publish ðŸ“‚
        run: dotnet build $PROJECT_PATH --configuration Release --no-restore
