name: Review Visualizer Continious Integration(CI)
on:
  push:
    branches:
      - main
env:
  OS: ubuntu-latest
jobs:
  lint:
    if: failure()
    strategy:
      matrix:
        project: ['Generator','WebApi']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set env variables
        run: |
          echo "PROJECT_PATH=ReviewVisualizer.${{ matrix.project }}/ReviewVisualizer.${{ matrix.project }}.csproj" >> $GITHUB_ENV
      
      - name: Prepare environment
        uses: ./.github/workflows/actions/prepare-net-env
        with:
          os: ${{ env.OS }}
          project-path: $PROJECT_PATH

      - name: Code lint / formatting check
        run: dotnet format --verify-no-changes
  
  build:
    needs: lint
    if: failure()
    strategy:
      matrix:
        project: ['Generator','WebApi']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env variables
        run: |
          echo "PROJECT_PATH=ReviewVisualizer.${{ matrix.project }}/ReviewVisualizer.${{ matrix.project }}.csproj" >> $GITHUB_ENV
          echo "AZURE_WEBAPP_PACKAGE_PATH=publish.${{ matrix.project }}" >> $GITHUB_ENV
      
      - name: Prepare environment
        uses: ./.github/workflows/actions/prepare-net-env
        with:
          os: ${{ env.OS }}
          project-path: $PROJECT_PATH

      - name: Build ðŸ§±
        run: dotnet build $PROJECT_PATH --configuration Release --no-restore
  
  unit-test:
    name: Unit tests (for Generator Project)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env variables
        run: |
          echo "TEST_PROJECT_PATH=ReviewVisualizer.Generator.Tests/ReviewVisualizer.Generator.Tests.csproj" >> $GITHUB_ENV
          
      - name: Prepare environment
        uses: ./.github/workflows/actions/prepare-net-env
        with:
          os: ${{ env.OS }}
          project_path: $TEST_PROJECT_PATH
      
      - name: Run Unit Tests
        id: testing-step
        run: |
          dotnet test $TEST_PROJECT_PATH \
            --configuration Release \
            --logger "trx;LogFileName=GeneratorTestsLog.trx" \
            /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
      
      - name: Upload Unit Test Report on Failure
        if: failure() && steps.testing-step.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-report
          path: ReviewVisualizer.Generator.Tests/TestResults/unit-test-results.trx
      
      - name: Upload Coverage Report Always
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ReviewVisualizer.Generator.Tests/coverage.cobertura.xml

  prepare-env-for-integration-testing:
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Rublish ReviewVisualizer ${{ needs.build.outputs.project }}
        run: echo "Preparing test env for ${{ needs.build.outputs.project }}"

  integartion-test:
    needs: prepare-env-for-integration-testing
    runs-on: ubuntu-latest
    steps:
      - name: Rublish ReviewVisualizer ${{ needs.build.outputs.project }}
        run: echo "Executing integration tests for ${{ needs.build.outputs.project }}"

  publish:
    needs: integartion-test
    strategy:
      matrix:
        project: ['Generator','WebApi']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env variables
        run: |
          echo "PROJECT_PATH=ReviewVisualizer.${{ matrix.project }}/ReviewVisualizer.${{ matrix.project }}.csproj" >> $GITHUB_ENV
          echo "PUBLISH_PATH=ReviewVisualizer.${{ matrix.project }}" >> $GITHUB_ENV
      
      - name: Prepare environment
        uses: ./.github/workflows/actions/prepare-net-env
        with:
          os: ${{ env.OS }}
          project-path: $PROJECT_PATH

      - name: Publish ðŸ“‚
        run: dotnet build $PROJECT_PATH --configuration Release --no-restore
