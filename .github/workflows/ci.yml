name: Review Visualizer Continious Integration(CI)
on:
  push:
    branches:
      - main
jobs:
  build:
    strategy:
      matrix:
        project: ['Generator','WebApi']
        os: ['ubuntu-latest', 'windows-latest']
    runs-on: ${{ matrix.os }}
    outputs:
      os: ${{ steps.set-output.outputs.os }}
      project: ${{ steps.set-output.outputs.project }}
      project_path: ${{ steps.set-output.outputs.project-path }}
    steps:
      - name: Set env variables
        run: |
          echo "PROJECT_PATH=ReviewVisualizer.${{ matrix.project }}/ReviewVisualizer.${{ matrix.project }}.csproj" >> $GITHUB_ENV
          echo "AZURE_WEBAPP_PACKAGE_PATH=publish.${{ matrix.project }}" >> $GITHUB_ENV
      - name: Prepare environment
        uses: './github/workflows/'
        with:
          os: ${{ matrix.os }}
          project_path: $PROJECT_PATH

      - name: Build ðŸ§±
        run: dotnet build $PROJECT_PATH --configuration Release --no-restore

      - name: Set output data
        id: set-output
        run: |
          echo "os=${{ matrix.os }} >> $GITHUB_OUTPUT"
          echo "project=${{ matrix.project }} >> $GITHUB_OUTPUT"
          echo "project-path=$PROJECT_PATH" >> $GITHUB_OUTPUT

      # - name: Publish
      #   run: dotnet publish WebApi -c Release --no-build --output '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}'
  
  unit-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Prepare environment
        uses: './github/workflows/'
        with:
          os: ${{ needs.build.outputs.os }}
          project_path: ${{ needs.build.outputs.project-path }}
      - name: Execute Test unit tests
        env:
          TEST_PROJECT: ReviewVisualizer.${{ needs.build.outputs.project }}.Tests/ReviewVisualizer${{ needs.build.outputs.project }}.Tests.csproj
        run: dotnet test $TEST_PROJECT --configuration Release

  prepare-env-for-integration-testing:
    needs: [unit-test, build]
    runs-on: ${{ needs.build.outputs.os }}
    steps:
      - name: Rublish ReviewVisualizer ${{ needs.build.outputs.project }}
        run: echo "Preparing test env for ${{ needs.build.outputs.project }}"

  integartion-test:
    needs: [prepare-env-for-integration-testing, build]
    runs-on: ${{ needs.build.outputs.os }}
    steps:
      - name: Rublish ReviewVisualizer ${{ needs.build.outputs.project }}
        run: echo "Executing integration tests for ${{ needs.build.outputs.project }}"

  publish:
    needs: [integartion-test, build]
    runs-on: ${{ needs.build.outputs.os }}
    steps:
      - name: Rublish ReviewVisualizer ${{ needs.build.outputs.project }}
        run: echo "Publishing ${{ needs.build.outputs.project }}"
